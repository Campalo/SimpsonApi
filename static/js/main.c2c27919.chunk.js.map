{"version":3,"sources":["SelectSimpson.js","DisplaySimpson.js","App.js","serviceWorker.js","index.js"],"names":["SelectSimpson","_ref","selectChar","react_default","a","createElement","onClick","DisplaySimpson","mySimpson","src","image","alt","quote","character","defaultSimpson","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","fetch","then","response","json","info","console","log","setState","_this3","className","src_SelectSimpson","getSimpson","src_DisplaySimpson","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAWeA,SARO,SAAAC,GAAoB,IAAjBC,EAAiBD,EAAjBC,WACvB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,QAASJ,GAAjB,gBCWSK,EAdQ,SAAAN,GAAmB,IAAhBO,EAAgBP,EAAhBO,UACxB,OACEL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKI,IAAKD,EAAUE,MAAOC,IAAI,oCAC/BR,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,cAAMG,EAAUI,MAAhB,OAEFT,EAAAC,EAAAC,cAAA,iBAASG,EAAUK,UAAnB,QCNFC,EAAiB,CACrBF,MACE,wEACFC,UAAW,eACXH,MACE,+FAsCWK,cAlCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAGXhB,UAAWM,GALIG,4EASN,IAAAQ,EAAAL,KAEXM,MAAM,gDACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJC,QAAQC,IAAIF,GAEZL,EAAKQ,SAAS,CACZzB,UAAWsB,EAAK,wCAKf,IAAAI,EAAAd,KACP,OACEjB,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,OACbhC,EAAAC,EAAAC,cAAA,iEACAF,EAAAC,EAAAC,cAAA,qDACAF,EAAAC,EAAAC,cAAC+B,EAAD,CAAelC,WAAY,kBAAMgC,EAAKG,gBACtClC,EAAAC,EAAAC,cAACiC,EAAD,CAAgB9B,UAAWY,KAAKI,MAAMhB,oBA7B5B+B,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.c2c27919.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// button to select one Simpson name to get more info about this character\r\nconst SelectSimpson = ({ selectChar }) => {\r\n  return (\r\n    <div>\r\n      <button onClick={selectChar}> Cliiiik </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectSimpson;\r\n","import React from \"react\";\r\n\r\n//template to display the information about the selected character\r\nconst DisplaySimpson = ({ mySimpson }) => {\r\n  return (\r\n    <div>\r\n      <img src={mySimpson.image} alt=\"Your favorite simpson character\" />\r\n      <ul>\r\n        <li>\r\n          <i> \"{mySimpson.quote}\" </i>\r\n        </li>\r\n        <li> By {mySimpson.character} </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplaySimpson;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport SelectSimpson from \"./SelectSimpson\";\nimport DisplaySimpson from \"./DisplaySimpson\";\n\nconst defaultSimpson = {\n  quote:\n    \"Shoplifting is a victimless crime, like punching someone in the dark.\",\n  character: \"Nelson Muntz\",\n  image:\n    \"https://cdn.glitch.com/3c3ffadc-3406-4440-bb95-d40ec8fcde72%2FNelsonMuntz.png?1497567511185\"\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // set up the \"testSimpson\" as a default\n      // in order to alsways have a character displayed\n      mySimpson: defaultSimpson\n    };\n  }\n\n  getSimpson() {\n    //Collection of Simpson info via fetch\n    fetch(\"https://thesimpsonsquoteapi.glitch.me/quotes\")\n      .then(response => response.json())\n      .then(info => {\n        console.log(info);\n        //Once the data is collected, we update our state with the new data\n        this.setState({\n          mySimpson: info[0]\n        });\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Do you know all the famous quotes from the Simpson?</h1>\n        <h2>Click to discover if you're a true fan!</h2>\n        <SelectSimpson selectChar={() => this.getSimpson()} />\n        <DisplaySimpson mySimpson={this.state.mySimpson} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}